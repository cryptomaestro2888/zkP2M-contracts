{
  "address": "0x94951e9BF60049b897A0F72EDcfe0713C2E8573C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_usdc",
          "type": "address"
        },
        {
          "internalType": "contract IPoseidon3",
          "name": "_poseidon3",
          "type": "address"
        },
        {
          "internalType": "contract IPoseidon6",
          "name": "_poseidon6",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minDepositAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxOnRampAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_intentExpirationPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_onRampCooldownPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sustainabilityFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_sustainabilityFeeRecipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_offChainVerifier",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "depositCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "deposits",
      "outputs": [
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "upiId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "depositAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "remainingDeposits",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "outstandingIntentAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "conversionRate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getAccountInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "idHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256[]",
              "name": "deposits",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct UPIRamp.AccountInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "getBestRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "bestDepositId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bestRate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        }
      ],
      "name": "getDeposit",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "depositor",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "upiId",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "depositAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "remainingDeposits",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "outstandingIntentAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "conversionRate",
              "type": "uint256"
            },
            {
              "internalType": "bytes32[]",
              "name": "intentHashes",
              "type": "bytes32[]"
            }
          ],
          "internalType": "struct UPIRamp.Deposit",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_depositIds",
          "type": "uint256[]"
        }
      ],
      "name": "getDepositFromIds",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "depositId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "depositor",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "upiId",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "depositAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "remainingDeposits",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "outstandingIntentAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "conversionRate",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32[]",
                  "name": "intentHashes",
                  "type": "bytes32[]"
                }
              ],
              "internalType": "struct UPIRamp.Deposit",
              "name": "deposit",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "availableLiquidity",
              "type": "uint256"
            }
          ],
          "internalType": "struct UPIRamp.DepositWithAvailableLiquidity[]",
          "name": "depositArray",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getIdCurrentIntentHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getLastOnRampTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRegistrationProcessor",
          "name": "_registrationProcessor",
          "type": "address"
        },
        {
          "internalType": "contract IUPISendProcessor",
          "name": "_sendProcessor",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "intentExpirationPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "intents",
      "outputs": [
        {
          "internalType": "address",
          "name": "onRamper",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "intentTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxOnRampAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minDepositAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "offChainVerifier",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_upiId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_depositAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_receiveAmount",
          "type": "uint256"
        }
      ],
      "name": "offRamp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "_a",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2][2]",
          "name": "_b",
          "type": "uint256[2][2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "_c",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[3]",
          "name": "_signals",
          "type": "uint256[3]"
        }
      ],
      "name": "onRamp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "onRampCooldownPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_intentHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_depositorId",
          "type": "string"
        }
      ],
      "name": "onRampWithoutProof",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poseidon3",
      "outputs": [
        {
          "internalType": "contract IPoseidon3",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poseidon6",
      "outputs": [
        {
          "internalType": "contract IPoseidon6",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "_a",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2][2]",
          "name": "_b",
          "type": "uint256[2][2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "_c",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[1]",
          "name": "_signals",
          "type": "uint256[1]"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_idHash",
          "type": "string"
        }
      ],
      "name": "registerWithoutProof",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registrationProcessor",
      "outputs": [
        {
          "internalType": "contract IRegistrationProcessor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sendProcessor",
      "outputs": [
        {
          "internalType": "contract IUPISendProcessor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxOnRampAmount",
          "type": "uint256"
        }
      ],
      "name": "setMaxOnRampAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_offChainVerifier",
          "type": "address"
        }
      ],
      "name": "setOffchainVerifier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRegistrationProcessor",
          "name": "_registrationProcessor",
          "type": "address"
        }
      ],
      "name": "setRegistrationProcessor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUPISendProcessor",
          "name": "_sendProcessor",
          "type": "address"
        }
      ],
      "name": "setSendProcessor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "signalIntent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sustainabilityFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sustainabilityFeeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdc",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x681331dcee9a200a09c6a2232b001c45775b455fe23356de51c809a624ac00f4",
  "receipt": {
    "to": null,
    "from": "0xC4F01Cb7A8548Ad27e9ACd16857754e24110E942",
    "contractAddress": "0x94951e9BF60049b897A0F72EDcfe0713C2E8573C",
    "transactionIndex": 0,
    "gasUsed": "2954931",
    "logsBloom": "0x
    "blockHash": "0x6858fb4315bdb5dd3421fe8971dfb046e7e45b8de902f8677f152887166f7d6b",
    "transactionHash": "0x681331dcee9a200a09c6a2232b001c45775b455fe23356de51c809a624ac00f4",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 27104916,
        "transactionHash": "0x681331dcee9a200a09c6a2232b001c45775b455fe23356de51c809a624ac00f4",
        "address": "0x94951e9BF60049b897A0F72EDcfe0713C2E8573C",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c4f01cb7a8548ad27e9acd16857754e24110e942"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x6858fb4315bdb5dd3421fe8971dfb046e7e45b8de902f8677f152887166f7d6b"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 27104916,
        "transactionHash": "0x681331dcee9a200a09c6a2232b001c45775b455fe23356de51c809a624ac00f4",
        "address": "0x94951e9BF60049b897A0F72EDcfe0713C2E8573C",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000c4f01cb7a8548ad27e9acd16857754e24110e942",
          "0x000000000000000000000000c4f01cb7a8548ad27e9acd16857754e24110e942"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x6858fb4315bdb5dd3421fe8971dfb046e7e45b8de902f8677f152887166f7d6b"
      }
    ],
    "blockNumber": 27104916,
    "cumulativeGasUsed": "2954931",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xC4F01Cb7A8548Ad27e9ACd16857754e24110E942",
    "0xBfF336931D7019966ED686ed85CcE22F5Ddac93e",
    "0x923eA822D2A818CaA2F295bA1C89ee51A5665438",
    "0x4696B8d334Be288bC3D4980f75361b32d8140ef7",
    "1000000",
    "998000000",
    "300",
    "0",
    "0",
    "0xC4F01Cb7A8548Ad27e9ACd16857754e24110E942",
    "0xC4F01Cb7A8548Ad27e9ACd16857754e24110E942"
  ],
  "numDeployments": 1,
  "solcInputHash": "936a03414a849181ad1343bf5c153c51",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_usdc\",\"type\":\"address\"},{\"internalType\":\"contract IPoseidon3\",\"name\":\"_poseidon3\",\"type\":\"address\"},{\"internalType\":\"contract IPoseidon6\",\"name\":\"_poseidon6\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minDepositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxOnRampAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_intentExpirationPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_onRampCooldownPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sustainabilityFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_sustainabilityFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_offChainVerifier\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"depositCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"upiId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingDeposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outstandingIntentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"conversionRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getAccountInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"idHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"deposits\",\"type\":\"uint256[]\"}],\"internalType\":\"struct UPIRamp.AccountInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getBestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bestDepositId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bestRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"getDeposit\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"upiId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingDeposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outstandingIntentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"conversionRate\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"intentHashes\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct UPIRamp.Deposit\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_depositIds\",\"type\":\"uint256[]\"}],\"name\":\"getDepositFromIds\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"upiId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingDeposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outstandingIntentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"conversionRate\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"intentHashes\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct UPIRamp.Deposit\",\"name\":\"deposit\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"availableLiquidity\",\"type\":\"uint256\"}],\"internalType\":\"struct UPIRamp.DepositWithAvailableLiquidity[]\",\"name\":\"depositArray\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getIdCurrentIntentHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getLastOnRampTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRegistrationProcessor\",\"name\":\"_registrationProcessor\",\"type\":\"address\"},{\"internalType\":\"contract IUPISendProcessor\",\"name\":\"_sendProcessor\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"intentExpirationPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"intents\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"onRamper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intentTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxOnRampAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"offChainVerifier\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_upiId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_receiveAmount\",\"type\":\"uint256\"}],\"name\":\"offRamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"_a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"_b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[3]\",\"name\":\"_signals\",\"type\":\"uint256[3]\"}],\"name\":\"onRamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onRampCooldownPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_intentHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_depositorId\",\"type\":\"string\"}],\"name\":\"onRampWithoutProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poseidon3\",\"outputs\":[{\"internalType\":\"contract IPoseidon3\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poseidon6\",\"outputs\":[{\"internalType\":\"contract IPoseidon6\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"_a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"_b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[1]\",\"name\":\"_signals\",\"type\":\"uint256[1]\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_idHash\",\"type\":\"string\"}],\"name\":\"registerWithoutProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registrationProcessor\",\"outputs\":[{\"internalType\":\"contract IRegistrationProcessor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendProcessor\",\"outputs\":[{\"internalType\":\"contract IUPISendProcessor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxOnRampAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxOnRampAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_offChainVerifier\",\"type\":\"address\"}],\"name\":\"setOffchainVerifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRegistrationProcessor\",\"name\":\"_registrationProcessor\",\"type\":\"address\"}],\"name\":\"setRegistrationProcessor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUPISendProcessor\",\"name\":\"_sendProcessor\",\"type\":\"address\"}],\"name\":\"setSendProcessor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"signalIntent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sustainabilityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sustainabilityFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Ramp.sol\":\"UPIRamp\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/Ramp.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport { Bytes32ArrayUtils } from \\\"./external/Bytes32ArrayUtils.sol\\\";\\nimport { Uint256ArrayUtils } from \\\"./external/Uint256ArrayUtils.sol\\\";\\n\\nimport { IPoseidon3 } from \\\"./interfaces/IPoseidon3.sol\\\";\\nimport { IPoseidon6 } from \\\"./interfaces/IPoseidon6.sol\\\";\\nimport { IRegistrationProcessor } from \\\"./interfaces/IRegistrationProcessor.sol\\\";\\nimport { IUPISendProcessor } from \\\"./interfaces/IUPISendProcessor.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\npragma solidity ^0.8.18;\\n\\ncontract UPIRamp is Ownable {\\n\\n    using Bytes32ArrayUtils for bytes32[];\\n    using Uint256ArrayUtils for uint256[];\\n\\n    /* ============ Structs ============ */\\n\\n    struct AccountInfo {\\n        bytes32 idHash;                     \\n        uint256[] deposits;                 \\n    }\\n\\n    struct Deposit {\\n        address depositor;\\n        string upiId;\\n        uint256 depositAmount;              \\n        uint256 remainingDeposits;          \\n        uint256 outstandingIntentAmount;    \\n        uint256 conversionRate;             \\n        bytes32[] intentHashes;             \\n    }\\n\\n    struct DepositWithAvailableLiquidity {\\n        uint256 depositId;                  \\n        Deposit deposit;                    \\n        uint256 availableLiquidity;         \\n    }\\n\\n    struct Intent {\\n        address onRamper;                   \\n        address to;                         \\n        uint256 deposit;                    \\n        uint256 amount;                     \\n        uint256 intentTimestamp;            \\n    }\\n\\n    struct IntentWithOnRamperId {\\n        Intent intent;                      \\n        bytes32 onRamperIdHash;             \\n    }\\n\\n    struct DenyList {\\n        bytes32[] deniedUsers;              \\n        mapping(bytes32 => bool) isDenied;  \\n    }\\n\\n    struct GlobalAccountInfo {\\n        bytes32 currentIntentHash;          \\n        uint256 lastOnrampTimestamp;        \\n        DenyList denyList;                  \\n    }\\n\\n    /* ============ Modifiers ============ */\\n    modifier onlyRegisteredUser() {\\n        require(accounts[msg.sender].idHash != bytes32(0), \\\"Caller must be registered user\\\");\\n        _;\\n    }\\n\\n    modifier onlyOffchainVerifier() {\\n        require(msg.sender == address(offChainVerifier), \\\"Caller must be offchain verifier\\\");\\n        _;\\n    }\\n\\n    /* ============ Constants ============ */\\n    uint256 internal constant PRECISE_UNIT = 1e18;\\n    uint256 internal constant MAX_DEPOSITS = 5;       // An account can only have max 5 different deposit parameterizations to prevent locking funds\\n    uint256 constant CIRCOM_PRIME_FIELD = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    uint256 constant MAX_SUSTAINABILITY_FEE = 5e16;   // 5% max sustainability fee\\n    \\n    /* ============ State Variables ============ */\\n    IERC20 public immutable usdc;\\n    IPoseidon3 public immutable poseidon3;\\n    IPoseidon6 public immutable poseidon6;\\n    IRegistrationProcessor public registrationProcessor;\\n    IUPISendProcessor public sendProcessor;\\n    address public offChainVerifier;\\n\\n    bool internal isInitialized;\\n\\n    mapping(bytes32 => GlobalAccountInfo) internal globalAccount;\\n    mapping(address => AccountInfo) internal accounts;\\n    mapping(uint256 => Deposit) public deposits;\\n    mapping(bytes32 => Intent) public intents;\\n\\n    uint256 public minDepositAmount;\\n    uint256 public maxOnRampAmount;\\n    uint256 public onRampCooldownPeriod;\\n    uint256 public intentExpirationPeriod;\\n    uint256 public sustainabilityFee;\\n    address public sustainabilityFeeRecipient;\\n\\n    uint256 public depositCounter;\\n\\n    /* ============ Constructor ============ */\\n    constructor(\\n        address _owner,\\n        IERC20 _usdc,\\n        IPoseidon3 _poseidon3,\\n        IPoseidon6 _poseidon6,\\n        uint256 _minDepositAmount,\\n        uint256 _maxOnRampAmount,\\n        uint256 _intentExpirationPeriod,\\n        uint256 _onRampCooldownPeriod,\\n        uint256 _sustainabilityFee,\\n        address _sustainabilityFeeRecipient,\\n        address _offChainVerifier\\n    )\\n        Ownable()\\n    {\\n        usdc = _usdc;\\n        poseidon3 = _poseidon3;\\n        poseidon6 = _poseidon6;\\n        offChainVerifier = _offChainVerifier;\\n        minDepositAmount = _minDepositAmount;\\n        maxOnRampAmount = _maxOnRampAmount;\\n        intentExpirationPeriod = _intentExpirationPeriod;\\n        onRampCooldownPeriod = _onRampCooldownPeriod;\\n        sustainabilityFee = _sustainabilityFee;\\n        sustainabilityFeeRecipient = _sustainabilityFeeRecipient;\\n\\n        transferOwnership(_owner);\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    function initialize(\\n        IRegistrationProcessor _registrationProcessor,\\n        IUPISendProcessor _sendProcessor\\n    )\\n        external\\n        onlyOwner\\n    {\\n        require(!isInitialized, \\\"Already initialized\\\");\\n\\n        registrationProcessor = _registrationProcessor;\\n        sendProcessor = _sendProcessor;\\n\\n        isInitialized = true;\\n    }\\n\\n    function register(\\n        uint[2] memory _a,\\n        uint[2][2] memory _b,\\n        uint[2] memory _c,\\n        uint[1] memory _signals\\n    )\\n        external\\n    {\\n        require(accounts[msg.sender].idHash == bytes32(0), \\\"Account already associated with idHash\\\");\\n        bytes32 idHash = _verifyRegistrationProof(_a, _b, _c, _signals);\\n\\n        accounts[msg.sender].idHash = idHash;\\n\\n    }\\n\\n    // Helper function to register without proof\\n    function registerWithoutProof(\\n        string memory _idHash\\n    )\\n        external\\n    {\\n        require(accounts[msg.sender].idHash == bytes32(0), \\\"Account already associated with idHash\\\");\\n\\n        accounts[msg.sender].idHash = _stringToBytes32(_idHash);\\n    }\\n\\n    function offRamp(\\n        string memory _upiId,\\n        uint256 _depositAmount,\\n        uint256 _receiveAmount\\n    )\\n        external\\n        onlyRegisteredUser\\n    {\\n        require(accounts[msg.sender].deposits.length < MAX_DEPOSITS, \\\"Maximum deposit amount reached\\\");\\n        require(_depositAmount >= minDepositAmount, \\\"Deposit amount must be greater than min deposit amount\\\");\\n        require(_receiveAmount > 0, \\\"Receive amount must be greater than 0\\\");\\n\\n        uint256 conversionRate = (_depositAmount * PRECISE_UNIT) / _receiveAmount;\\n        uint256 depositId = depositCounter++;\\n\\n        AccountInfo storage account = accounts[msg.sender];\\n        account.deposits.push(depositId);\\n\\n        deposits[depositId] = Deposit({\\n            depositor: msg.sender,\\n            upiId: _upiId,\\n            depositAmount: _depositAmount,\\n            remainingDeposits: _depositAmount,\\n            outstandingIntentAmount: 0,\\n            conversionRate: conversionRate,\\n            intentHashes: new bytes32[](0)\\n        });\\n\\n        usdc.transferFrom(msg.sender, address(this), _depositAmount);\\n\\n    }\\n\\n    function signalIntent(uint256 _depositId, uint256 _amount, address _to) external {\\n\\n        if (accounts[msg.sender].idHash == 0) {\\n            accounts[msg.sender].idHash = _addressToBytes32(msg.sender);\\n        }\\n        bytes32 idHash = accounts[msg.sender].idHash;\\n        Deposit storage deposit = deposits[_depositId];\\n        bytes32 depositorIdHash = accounts[deposit.depositor].idHash;\\n\\n        // Caller validity checks\\n        require(!globalAccount[depositorIdHash].denyList.isDenied[idHash], \\\"Onramper on depositor's denylist\\\");\\n        require(\\n            globalAccount[idHash].lastOnrampTimestamp + onRampCooldownPeriod <= block.timestamp,\\n            \\\"On ramp cool down period not elapsed\\\"\\n        );\\n        require(globalAccount[idHash].currentIntentHash == bytes32(0), \\\"Intent still outstanding\\\");\\n        require(depositorIdHash != idHash, \\\"Sender cannot be the depositor\\\");\\n\\n        // Intent information checks\\n        require(deposit.depositor != address(0), \\\"Deposit does not exist\\\");\\n        require(_amount > 0, \\\"Signaled amount must be greater than 0\\\");\\n        require(_amount <= maxOnRampAmount, \\\"Signaled amount must be less than max on-ramp amount\\\");\\n        require(_to != address(0), \\\"Cannot send to zero address\\\");\\n\\n        bytes32 intentHash = _calculateIntentHash(idHash, _depositId);\\n\\n        if (deposit.remainingDeposits < _amount) {\\n            (\\n                bytes32[] memory prunableIntents,\\n                uint256 reclaimableAmount\\n            ) = _getPrunableIntents(_depositId);\\n\\n            require(deposit.remainingDeposits + reclaimableAmount >= _amount, \\\"Not enough liquidity\\\");\\n\\n            _pruneIntents(deposit, prunableIntents);\\n            deposit.remainingDeposits += reclaimableAmount;\\n            deposit.outstandingIntentAmount -= reclaimableAmount;\\n        }\\n\\n        intents[intentHash] = Intent({\\n            onRamper: msg.sender,\\n            to: _to,\\n            deposit: _depositId,\\n            amount: _amount,\\n            intentTimestamp: block.timestamp\\n        });\\n\\n        globalAccount[idHash].currentIntentHash = intentHash;\\n\\n        deposit.remainingDeposits -= _amount;\\n        deposit.outstandingIntentAmount += _amount;\\n        deposit.intentHashes.push(intentHash);\\n\\n    }\\n\\n    function onRamp(\\n        uint256[2] memory _a,\\n        uint256[2][2] memory _b,\\n        uint256[2] memory _c,\\n        uint256[3] memory _signals\\n    )\\n        external\\n    {\\n        (\\n            Intent memory intent,\\n            Deposit storage deposit,\\n            bytes32 intentHash\\n        ) = _verifyOnRampProof(_a, _b, _c, _signals);\\n\\n        _pruneIntent(deposit, intentHash);\\n\\n        deposit.outstandingIntentAmount -= intent.amount;\\n        globalAccount[accounts[intent.onRamper].idHash].lastOnrampTimestamp = block.timestamp;\\n        _closeDepositIfNecessary(intent.deposit, deposit);\\n\\n        _transferFunds(intentHash, intent);\\n    }\\n\\n    function onRampWithoutProof(\\n        bytes32 _intentHash,\\n        uint256 _amount,\\n        uint256 _timestamp,\\n        string memory _depositorId\\n    )\\n        external\\n        onlyOffchainVerifier()\\n    {\\n        Intent memory intent = intents[_intentHash];\\n        Deposit storage deposit = deposits[intent.deposit];\\n        \\n        require(intent.onRamper != address(0), \\\"Intent does not exist\\\");\\n        require(intent.intentTimestamp <= _timestamp, \\\"Intent was not created before send\\\");\\n        require(_amount >= (intent.amount * PRECISE_UNIT) / deposit.conversionRate, \\\"Payment was not enough\\\");\\n        bytes32 temp1 = _stringToBytes32(_depositorId);\\n        bytes32 temp2 = accounts[deposit.depositor].idHash;\\n        console.logBytes32(temp1);\\n        console.logBytes32(temp2);\\n        // require(_stringToBytes32(_depositorId) == accounts[deposit.depositor].idHash, \\\"Depositor id does not match\\\");\\n\\n        _pruneIntent(deposit, _intentHash);\\n\\n        deposit.outstandingIntentAmount -= intent.amount;\\n        globalAccount[accounts[intent.onRamper].idHash].lastOnrampTimestamp = block.timestamp;\\n        _closeDepositIfNecessary(intent.deposit, deposit);\\n\\n        _transferFunds(_intentHash, intent);\\n\\n    }\\n\\n\\n    /* ============ Governance Functions ============ */\\n\\n    function setSendProcessor(IUPISendProcessor _sendProcessor) external onlyOwner {\\n        sendProcessor = _sendProcessor;\\n    }\\n\\n    function setRegistrationProcessor(IRegistrationProcessor _registrationProcessor) external onlyOwner {\\n        registrationProcessor = _registrationProcessor;\\n    }\\n\\n    function setMaxOnRampAmount(uint256 _maxOnRampAmount) external onlyOwner {\\n        require(_maxOnRampAmount != 0, \\\"Max on ramp amount cannot be zero\\\");\\n\\n        maxOnRampAmount = _maxOnRampAmount;\\n    }\\n\\n    function setOffchainVerifier(address _offChainVerifier) external onlyOwner {\\n        offChainVerifier = _offChainVerifier;\\n    }\\n\\n    /* ============ External View Functions ============ */\\n\\n    function getDeposit(uint256 _depositId) external view returns (Deposit memory) {\\n        return deposits[_depositId];\\n    }\\n\\n    function getAccountInfo(address _account) external view returns (AccountInfo memory) {\\n        return accounts[_account];\\n    }\\n\\n    function getIdCurrentIntentHash(address _account) external view returns (bytes32) {\\n        return globalAccount[accounts[_account].idHash].currentIntentHash;\\n    }\\n\\n    function getLastOnRampTimestamp(address _account) external view returns (uint256) {\\n        return globalAccount[accounts[_account].idHash].lastOnrampTimestamp;\\n    }\\n\\n    function getDepositFromIds(uint256[] memory _depositIds) external view returns (DepositWithAvailableLiquidity[] memory depositArray) {\\n        depositArray = new DepositWithAvailableLiquidity[](_depositIds.length);\\n\\n        for (uint256 i = 0; i < _depositIds.length; ++i) {\\n            uint256 depositId = _depositIds[i];\\n            Deposit memory deposit = deposits[depositId];\\n            ( , uint256 reclaimableAmount) = _getPrunableIntents(depositId);\\n\\n            depositArray[i] = DepositWithAvailableLiquidity({\\n                depositId: depositId,\\n                deposit: deposit,\\n                availableLiquidity: deposit.remainingDeposits + reclaimableAmount\\n            });\\n        }\\n\\n        return depositArray;\\n    }\\n\\n    // helper function to get best rates for a given amount\\n    function getBestRate(uint256 _amount) external view returns (uint256 bestDepositId, uint256 bestRate) {\\n        \\n        bestDepositId = 0;\\n        bestRate = deposits[bestDepositId].conversionRate;\\n\\n        for (uint256 i = 1; i < depositCounter; ++i) {\\n            uint256 conversionRate = deposits[i].conversionRate;\\n\\n            if (conversionRate > bestRate && deposits[i].remainingDeposits >= _amount) {\\n                bestDepositId = i;\\n                bestRate = conversionRate;\\n            }\\n        }\\n\\n        return (bestDepositId, bestRate);\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    function _calculateIntentHash(\\n        bytes32 _idHash,\\n        uint256 _depositId\\n    )\\n        internal\\n        view\\n        virtual\\n        returns (bytes32 intentHash)\\n    {\\n        // Mod with circom prime field to make sure it fits in a 254-bit field\\n        uint256 intermediateHash = uint256(keccak256(abi.encodePacked(_idHash, _depositId, block.timestamp)));\\n        intentHash = bytes32(intermediateHash % CIRCOM_PRIME_FIELD);\\n    }\\n\\n    function _getPrunableIntents(\\n        uint256 _depositId\\n    )\\n        internal\\n        view\\n        returns(bytes32[] memory prunableIntents, uint256 reclaimedAmount)\\n    {\\n        bytes32[] memory intentHashes = deposits[_depositId].intentHashes;\\n        prunableIntents = new bytes32[](intentHashes.length);\\n\\n        for (uint256 i = 0; i < intentHashes.length; ++i) {\\n            Intent memory intent = intents[intentHashes[i]];\\n            if (intent.intentTimestamp + intentExpirationPeriod < block.timestamp) {\\n                prunableIntents[i] = intentHashes[i];\\n                reclaimedAmount += intent.amount;\\n            }\\n        }\\n    }\\n\\n    function _pruneIntents(Deposit storage _deposit, bytes32[] memory _intents) internal {\\n        for (uint256 i = 0; i < _intents.length; ++i) {\\n            if (_intents[i] != bytes32(0)) {\\n                _pruneIntent(_deposit, _intents[i]);\\n            }\\n        }\\n    }\\n\\n    function _pruneIntent(Deposit storage _deposit, bytes32 _intentHash) internal {\\n        Intent memory intent = intents[_intentHash];\\n\\n        delete globalAccount[accounts[intent.onRamper].idHash].currentIntentHash;\\n        delete intents[_intentHash];\\n        _deposit.intentHashes.removeStorage(_intentHash);\\n\\n    }\\n\\n    function _closeDepositIfNecessary(uint256 _depositId, Deposit storage _deposit) internal {\\n        uint256 openDepositAmount = _deposit.outstandingIntentAmount + _deposit.remainingDeposits;\\n        if (openDepositAmount == 0) {\\n            accounts[_deposit.depositor].deposits.removeStorage(_depositId);\\n            delete deposits[_depositId];\\n        }\\n    }\\n\\n    function _transferFunds(bytes32 _intentHash, Intent memory _intent) internal {\\n        uint256 fee;\\n        if (sustainabilityFee != 0) {\\n            fee = (_intent.amount * sustainabilityFee) / PRECISE_UNIT;\\n            usdc.transfer(sustainabilityFeeRecipient, fee);\\n        }\\n\\n        uint256 onRampAmount = _intent.amount - fee;\\n        usdc.transfer(_intent.to, onRampAmount);\\n\\n    }\\n\\n    function _verifyOnRampProof(\\n        uint256[2] memory _a,\\n        uint256[2][2] memory _b,\\n        uint256[2] memory _c,\\n        uint256[3] memory _signals\\n    )\\n        internal\\n        returns(Intent memory, Deposit storage, bytes32)\\n    {\\n        (\\n            uint256 amount,\\n            uint256 timestamp,\\n            bytes32 intentHash\\n        ) = sendProcessor.processProof(\\n            IUPISendProcessor.SendProof({\\n                a: _a,\\n                b: _b,\\n                c: _c,\\n                signals: _signals\\n            })\\n        );\\n\\n        Intent memory intent = intents[intentHash];\\n        Deposit storage deposit = deposits[intent.deposit];\\n\\n        require(intent.onRamper != address(0), \\\"Intent does not exist\\\");\\n        require(intent.intentTimestamp <= timestamp, \\\"Intent was not created before send\\\");\\n        require(amount >= (intent.amount * PRECISE_UNIT) / deposit.conversionRate, \\\"Payment was not enough\\\");\\n\\n        return (intent, deposit, intentHash);\\n    }\\n\\n    function _verifyRegistrationProof(\\n        uint256[2] memory _a,\\n        uint256[2][2] memory _b,\\n        uint256[2] memory _c,\\n        uint256[1] memory _signals\\n    )\\n        internal\\n        view\\n        returns(bytes32)\\n    {\\n        bytes32 idHash = registrationProcessor.processProof(\\n            IRegistrationProcessor.RegistrationProof({\\n                a: _a,\\n                b: _b,\\n                c: _c,\\n                signals: _signals\\n            })\\n        );\\n\\n        return idHash;\\n    }\\n\\n    function _stringToBytes32(string memory source) internal pure returns (bytes32 result) {\\n        bytes memory tempEmptyStringTest = bytes(source);\\n        if (tempEmptyStringTest.length == 0) {\\n            return 0x0;\\n        }\\n\\n        assembly {\\n            result := mload(add(source, 32))\\n        }\\n    }\\n\\n    function _addressToBytes32(address addr) internal pure returns (bytes32) {\\n        return bytes32(uint256(uint160(addr)) << 96);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xef030c7cbfe221a2aba7da99ee262e193c5a89e6143369878689e5bab2280ea0\",\"license\":\"MIT\"},\"contracts/external/Bytes32ArrayUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title Bytes32ArrayUtils\\n * @author ZKP2P\\n *\\n * Fork of Set Protocol's AddressArrayUtils library adapted for usage with bytes32 arrays.\\n */\\nlibrary Bytes32ArrayUtils {\\n\\n    uint256 constant internal MAX_INT = 2**256 - 1;\\n\\n    /**\\n     * Finds the index of the first occurrence of the given element.\\n     * @param A The input array to search\\n     * @param a The value to find\\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\\n     */\\n    function indexOf(bytes32[] memory A, bytes32 a) internal pure returns (uint256, bool) {\\n        uint256 length = A.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (A[i] == a) {\\n                return (i, true);\\n            }\\n        }\\n        return (MAX_INT, false);\\n    }\\n\\n    /**\\n    * Returns true if the value is present in the list. Uses indexOf internally.\\n    * @param A The input array to search\\n    * @param a The value to find\\n    * @return Returns isIn for the first occurrence starting from index 0\\n    */\\n    function contains(bytes32[] memory A, bytes32 a) internal pure returns (bool) {\\n        (, bool isIn) = indexOf(A, a);\\n        return isIn;\\n    }\\n\\n    /**\\n    * Returns true if there are 2 elements that are the same in an array\\n    * @param A The input array to search\\n    * @return Returns boolean for the first occurrence of a duplicate\\n    */\\n    function hasDuplicate(bytes32[] memory A) internal pure returns(bool) {\\n        require(A.length > 0, \\\"A is empty\\\");\\n\\n        for (uint256 i = 0; i < A.length - 1; i++) {\\n            bytes32 current = A[i];\\n            for (uint256 j = i + 1; j < A.length; j++) {\\n                if (current == A[j]) {\\n                    return true;\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The bytes32 to remove\\n     * @return Returns the array with the object removed.\\n     */\\n    function remove(bytes32[] memory A, bytes32 a)\\n        internal\\n        pure\\n        returns (bytes32[] memory)\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert(\\\"bytes32 not in array.\\\");\\n        } else {\\n            (bytes32[] memory _A,) = pop(A, index);\\n            return _A;\\n        }\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The bytes32 to remove\\n     */\\n    function removeStorage(bytes32[] storage A, bytes32 a)\\n        internal\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert(\\\"bytes32 not in array.\\\");\\n        } else {\\n            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\\n            if (index != lastIndex) { A[index] = A[lastIndex]; }\\n            A.pop();\\n        }\\n    }\\n\\n    /**\\n    * Removes specified index from array\\n    * @param A The input array to search\\n    * @param index The index to remove\\n    * @return Returns the new array and the removed entry\\n    */\\n    function pop(bytes32[] memory A, uint256 index)\\n        internal\\n        pure\\n        returns (bytes32[] memory, bytes32)\\n    {\\n        uint256 length = A.length;\\n        require(index < A.length, \\\"Index must be < A length\\\");\\n        bytes32[] memory newBytes = new bytes32[](length - 1);\\n        for (uint256 i = 0; i < index; i++) {\\n            newBytes[i] = A[i];\\n        }\\n        for (uint256 j = index + 1; j < length; j++) {\\n            newBytes[j - 1] = A[j];\\n        }\\n        return (newBytes, A[index]);\\n    }\\n}\\n\",\"keccak256\":\"0x14d572deda126ff812eb5ab0eed33120e13cc568fd611a4a6bff652f3e8440a8\",\"license\":\"MIT\"},\"contracts/external/Uint256ArrayUtils.sol\":{\"content\":\"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity ^0.8.18;\\n\\n/**\\n * @title Uint256ArrayUtils\\n * @author Set Protocol\\n *\\n * Utility functions to handle Uint256 Arrays\\n */\\nlibrary Uint256ArrayUtils {\\n\\n    uint256 constant internal MAX_INT = 2**256 - 1;\\n\\n    /**\\n     * Finds the index of the first occurrence of the given element.\\n     * @param A The input array to search\\n     * @param a The value to find\\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\\n     */\\n    function indexOf(uint256[] memory A, uint256 a) internal pure returns (uint256, bool) {\\n        uint256 length = A.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (A[i] == a) {\\n                return (i, true);\\n            }\\n        }\\n        return (MAX_INT, false);\\n    }\\n\\n    /**\\n     * Returns the combination of the two arrays\\n     * @param A The first array\\n     * @param B The second array\\n     * @return Returns A extended by B\\n     */\\n    function extend(uint256[] memory A, uint256[] memory B) internal pure returns (uint256[] memory) {\\n        uint256 aLength = A.length;\\n        uint256 bLength = B.length;\\n        uint256[] memory newUints = new uint256[](aLength + bLength);\\n        for (uint256 i = 0; i < aLength; i++) {\\n            newUints[i] = A[i];\\n        }\\n        for (uint256 j = 0; j < bLength; j++) {\\n            newUints[aLength + j] = B[j];\\n        }\\n        return newUints;\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The bytes32 to remove\\n     */\\n    function removeStorage(uint256[] storage A, uint256 a)\\n        internal\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert(\\\"uint256 not in array.\\\");\\n        } else {\\n            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\\n            if (index != lastIndex) { A[index] = A[lastIndex]; }\\n            A.pop();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x102021415f8444ff563fc6d0082f39296f47c09ce73fb4cd642e700ac489eefe\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IPoseidon3.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\ninterface IPoseidon3 {\\n    function poseidon(uint256[3] memory _a) external pure returns(uint256);\\n}\\n\",\"keccak256\":\"0x39cd67d4a7ef93e243c77b7c8a40c3842c060a7f444b0b2c875bce7d8d0c24fa\",\"license\":\"MIT\"},\"contracts/interfaces/IPoseidon6.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\ninterface IPoseidon6 {\\n    function poseidon(uint256[6] memory _a) external pure returns(uint256);\\n}\\n\",\"keccak256\":\"0x9609bcff68e45a22b551bf5f42a5ea62ea0b33e433a89f7c89a6b0714df09229\",\"license\":\"MIT\"},\"contracts/interfaces/IRegistrationProcessor.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\ninterface IRegistrationProcessor {\\n\\n    struct RegistrationProof {\\n        uint256[2] a;\\n        uint256[2][2] b;\\n        uint256[2] c;\\n        uint256[1] signals;\\n    }\\n\\n    function processProof(\\n        RegistrationProof calldata _proof\\n    )\\n        external\\n        view\\n    returns (bytes32);\\n}\\n\",\"keccak256\":\"0x026fb8c621bae2282c82ddb316a83295ac45a71053ec721a4544f979994f6777\",\"license\":\"MIT\"},\"contracts/interfaces/IUPISendProcessor.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\ninterface IUPISendProcessor {\\n\\n    struct SendProof {\\n        uint256[2] a;\\n        uint256[2][2] b;\\n        uint256[2] c;\\n        uint256[3] signals;\\n    }\\n\\n    function processProof(\\n        SendProof calldata _proof\\n    )\\n        external\\n    returns(uint256, uint256, bytes32);\\n}\\n\",\"keccak256\":\"0x1afabe88997c53823b2da94a2a32e5192ce2c9b324bc8f9c862aceedf1b17aaf\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102115760003560e01c806371a28f6911610125578063be7ee7c8116100ad578063e279d9641161007c578063e279d96414610584578063ecb3dc881461058d578063ed1692b814610596578063eea1d197146105a9578063f2fde38b146105bc57600080fd5b8063be7ee7c814610524578063cce3e03814610537578063d9478d201461055e578063e215ad591461057157600080fd5b80639087beff116100f45780639087beff146104b05780639f9fb968146104c3578063a1a954b7146104e3578063a2333a61146104ec578063b02c43d0146104ff57600080fd5b806371a28f69146103e35780637b510fe8146104035780638da5cb5b146104235780639021578a1461043457600080fd5b806336a175ef116101a85780633e413bee116101775780633e413bee1461038f578063485cc955146103b6578063495223e7146103c9578063645006ca146103d2578063715018a6146103db57600080fd5b806336a175ef1461031757806337fbdf6d1461032a5780633930a4391461033d5780633adba28a1461037c57600080fd5b80632055a6e1116101e45780632055a6e1146102c0578063238c8494146102d357806327c6e693146102dc578063314a61c51461030457600080fd5b80630d4c3ad9146102165780630f1ef98c1461022b578063133de6cb1461027757806314ec32fa1461028a575b600080fd5b610229610224366004612718565b6105cf565b005b6102646102393660046127e5565b6001600160a01b03166000908152600560209081526040808320548352600490915290206001015490565b6040519081526020015b60405180910390f35b6102296102853660046127e5565b61065c565b6102646102983660046127e5565b6001600160a01b03166000908152600560209081526040808320548352600490915290205490565b6102296102ce366004612879565b610686565b610264600c5481565b6102ef6102ea3660046128d3565b6108d1565b6040805192835260208301919091520161026e565b6102296103123660046128ec565b61095f565b6102296103253660046129a4565b6109b1565b6102296103383660046129d9565b6109fa565b6103647f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161026e565b61022961038a366004612a27565b610d3f565b6103647f000000000000000000000000000000000000000000000000000000000000000081565b6102296103c4366004612a60565b611252565b610264600a5481565b61026460085481565b6102296112eb565b6103f66103f1366004612a99565b6112ff565b60405161026e9190612c23565b6104166104113660046127e5565b611537565b60405161026e9190612ca4565b6000546001600160a01b0316610364565b61047d6104423660046128d3565b600760205260009081526040902080546001820154600283015460038401546004909401546001600160a01b03938416949390921692909185565b604080516001600160a01b039687168152959094166020860152928401919091526060830152608082015260a00161026e565b6102296104be3660046128d3565b6115d1565b6104d66104d13660046128d3565b611638565b60405161026e9190612cee565b610264600b5481565b600354610364906001600160a01b031681565b61051261050d3660046128d3565b611783565b60405161026e96959493929190612d01565b6102296105323660046127e5565b61184a565b6103647f000000000000000000000000000000000000000000000000000000000000000081565b600d54610364906001600160a01b031681565b600154610364906001600160a01b031681565b61026460095481565b610264600e5481565b6102296105a43660046127e5565b611874565b600254610364906001600160a01b031681565b6102296105ca3660046127e5565b61189e565b60008060006105e087878787611917565b9250925092506105f08282611b4b565b82606001518260040160008282546106089190612d60565b909155505082516001600160a01b03166000908152600560209081526040808320548352600490915290819020426001909101558301516106499083611bf4565b6106538184611c9b565b50505050505050565b610664611e14565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6003546001600160a01b031633146106e55760405162461bcd60e51b815260206004820181905260248201527f43616c6c6572206d757374206265206f6666636861696e20766572696669657260448201526064015b60405180910390fd5b6000848152600760209081526040808320815160a08101835281546001600160a01b03908116825260018301548116828601526002830154828501819052600384015460608401526004909301546080830152918552600690935292208151919290911661078d5760405162461bcd60e51b8152602060048201526015602482015274125b9d195b9d08191bd95cc81b9bdd08195e1a5cdd605a1b60448201526064016106dc565b83826080015111156107b15760405162461bcd60e51b81526004016106dc90612d79565b8060050154670de0b6b3a764000083606001516107ce9190612dbb565b6107d89190612de8565b8510156108205760405162461bcd60e51b81526020600482015260166024820152750a0c2f2dacadce840eec2e640dcdee840cadcdeeaced60531b60448201526064016106dc565b600061082b84611e6e565b82546001600160a01b031660009081526005602052604090205490915061085182611e8d565b61085a81611e8d565b6108648389611b4b565b836060015183600401600082825461087c9190612d60565b909155505083516001600160a01b03166000908152600560209081526040808320548352600490915290819020426001909101558401516108bd9084611bf4565b6108c78885611c9b565b5050505050505050565b600080805260066020527f54cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4fd5460015b600e5481101561095957600081815260066020526040902060050154828111801561093c57506000828152600660205260409020600301548511155b15610948578193508092505b5061095281612dfc565b9050610900565b50915091565b336000908152600560205260409020541561098c5760405162461bcd60e51b81526004016106dc90612e15565b600061099a85858585611ed2565b336000908152600560205260409020555050505050565b33600090815260056020526040902054156109de5760405162461bcd60e51b81526004016106dc90612e15565b6109e781611e6e565b3360009081526005602052604090205550565b33600090815260056020526040902054610a565760405162461bcd60e51b815260206004820152601e60248201527f43616c6c6572206d75737420626520726567697374657265642075736572000060448201526064016106dc565b3360009081526005602081905260409091206001015410610ab95760405162461bcd60e51b815260206004820152601e60248201527f4d6178696d756d206465706f73697420616d6f756e742072656163686564000060448201526064016106dc565b600854821015610b2a5760405162461bcd60e51b815260206004820152603660248201527f4465706f73697420616d6f756e74206d757374206265206772656174657220746044820152751a185b881b5a5b8819195c1bdcda5d08185b5bdd5b9d60521b60648201526084016106dc565b60008111610b885760405162461bcd60e51b815260206004820152602560248201527f5265636569766520616d6f756e74206d75737420626520677265617465722074604482015264068616e20360dc1b60648201526084016106dc565b600081610b9d670de0b6b3a764000085612dbb565b610ba79190612de8565b600e80549192506000919082610bbc83612dfc565b9091555033600081815260056020908152604080832060018082018054808301825590865284862001879055825160e0810184529586528584018c81528684018c9052606087018c90526080870186905260a087018a90528351868152808601855260c0880152878652600690945291909320845181546001600160a01b0319166001600160a01b03909116178155915194955091939091820190610c619082612edd565b5060408201516002820155606082015160038201556080820151600482015560a0820151600582015560c08201518051610ca59160068401916020909101906124e8565b50506040516323b872dd60e01b8152336004820152306024820152604481018790527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691506323b872dd906064016020604051808303816000875af1158015610d1b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106539190612f9d565b336000908152600560205260408120549003610d79573360601b6bffffffffffffffffffffffff1916336000908152600560205260409020555b336000908152600560208181526040808420548785526006835281852080546001600160a01b03168652938352818520548086526004845282862082875260030190935293205460ff1615610e105760405162461bcd60e51b815260206004820181905260248201527f4f6e72616d706572206f6e206465706f7369746f7227732064656e796c69737460448201526064016106dc565b600a546000848152600460205260409020600101544291610e3091612fbf565b1115610e8a5760405162461bcd60e51b8152602060048201526024808201527f4f6e2072616d7020636f6f6c20646f776e20706572696f64206e6f7420656c616044820152631c1cd95960e21b60648201526084016106dc565b60008381526004602052604090205415610ee65760405162461bcd60e51b815260206004820152601860248201527f496e74656e74207374696c6c206f75747374616e64696e67000000000000000060448201526064016106dc565b828103610f355760405162461bcd60e51b815260206004820152601e60248201527f53656e6465722063616e6e6f7420626520746865206465706f7369746f72000060448201526064016106dc565b81546001600160a01b0316610f855760405162461bcd60e51b815260206004820152601660248201527511195c1bdcda5d08191bd95cc81b9bdd08195e1a5cdd60521b60448201526064016106dc565b60008511610fe45760405162461bcd60e51b815260206004820152602660248201527f5369676e616c656420616d6f756e74206d75737420626520677265617465722060448201526507468616e20360d41b60648201526084016106dc565b6009548511156110535760405162461bcd60e51b815260206004820152603460248201527f5369676e616c656420616d6f756e74206d757374206265206c657373207468616044820152731b881b585e081bdb8b5c985b5c08185b5bdd5b9d60621b60648201526084016106dc565b6001600160a01b0384166110a95760405162461bcd60e51b815260206004820152601b60248201527f43616e6e6f742073656e6420746f207a65726f2061646472657373000000000060448201526064016106dc565b60006110b58488611f70565b9050858360030154101561116a576000806110cf89611fdb565b91509150878186600301546110e49190612fbf565b10156111295760405162461bcd60e51b81526020600482015260146024820152734e6f7420656e6f756768206c697175696469747960601b60448201526064016106dc565b611133858361218b565b808560030160008282546111479190612fbf565b92505081905550808560040160008282546111629190612d60565b909155505050505b6040805160a0810182523381526001600160a01b0387811660208084019182528385018c8152606085018c81524260808701908152600089815260078552888120975188549088166001600160a01b03199182161789559551600189018054919098169616959095179095559051600286015551600380860191909155925160049485015588825292909252918120839055908401805488929061120f908490612d60565b925050819055508583600401600082825461122a9190612fbf565b9091555050600690920180546001810182556000918252602090912001919091555050505050565b61125a611e14565b600354600160a01b900460ff16156112aa5760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b60448201526064016106dc565b600180546001600160a01b039384166001600160a01b031991821617909155600280549290931691161790556003805460ff60a01b1916600160a01b179055565b6112f3611e14565b6112fd60006121ed565b565b6060815167ffffffffffffffff81111561131b5761131b612609565b60405190808252806020026020018201604052801561135457816020015b611341612533565b8152602001906001900390816113395790505b50905060005b825181101561153157600083828151811061137757611377612fd2565b6020908102919091018101516000818152600683526040808220815160e0810190925280546001600160a01b0316825260018101805494965092949193909291840191906113c490612e5b565b80601f01602080910402602001604051908101604052809291908181526020018280546113f090612e5b565b801561143d5780601f106114125761010080835404028352916020019161143d565b820191906000526020600020905b81548152906001019060200180831161142057829003601f168201915b5050505050815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682018054806020026020016040519081016040528092919081815260200182805480156114bd57602002820191906000526020600020905b8154815260200190600101908083116114a9575b505050505081525050905060006114d383611fdb565b91505060405180606001604052808481526020018381526020018284606001516114fd9190612fbf565b81525085858151811061151257611512612fd2565b60200260200101819052505050508061152a90612dfc565b905061135a565b50919050565b6040805180820190915260008152606060208201526001600160a01b0382166000908152600560209081526040918290208251808401845281548152600182018054855181860281018601909652808652919492938581019392908301828280156115c157602002820191906000526020600020905b8154815260200190600101908083116115ad575b5050505050815250509050919050565b6115d9611e14565b806000036116335760405162461bcd60e51b815260206004820152602160248201527f4d6178206f6e2072616d7020616d6f756e742063616e6e6f74206265207a65726044820152606f60f81b60648201526084016106dc565b600955565b61164061255a565b600082815260066020908152604091829020825160e0810190935280546001600160a01b03168352600181018054919284019161167c90612e5b565b80601f01602080910402602001604051908101604052809291908181526020018280546116a890612e5b565b80156116f55780601f106116ca576101008083540402835291602001916116f5565b820191906000526020600020905b8154815290600101906020018083116116d857829003601f168201915b5050505050815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682018054806020026020016040519081016040528092919081815260200182805480156115c157602002820191906000526020600020908154815260200190600101908083116115ad575050505050815250509050919050565b600660205260009081526040902080546001820180546001600160a01b0390921692916117af90612e5b565b80601f01602080910402602001604051908101604052809291908181526020018280546117db90612e5b565b80156118285780601f106117fd57610100808354040283529160200191611828565b820191906000526020600020905b81548152906001019060200180831161180b57829003601f168201915b5050505050908060020154908060030154908060040154908060050154905086565b611852611e14565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b61187c611e14565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6118a6611e14565b6001600160a01b03811661190b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106dc565b611914816121ed565b50565b61195b6040518060a0016040528060006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001600081525090565b60025460408051608081018252878152602081018790528082018690526060810185905290516345452acd60e01b815260009283928392839283926001600160a01b03909116916345452acd916119b491600401613039565b6060604051808303816000875af11580156119d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119f791906130a8565b6000818152600760209081526040808320815160a08101835281546001600160a01b03908116825260018301548116828601526002830154828501819052600384015460608401526004909301546080830152918552600690935292208151959850939650919450909216611aa65760405162461bcd60e51b8152602060048201526015602482015274125b9d195b9d08191bd95cc81b9bdd08195e1a5cdd605a1b60448201526064016106dc565b8382608001511115611aca5760405162461bcd60e51b81526004016106dc90612d79565b8060050154670de0b6b3a76400008360600151611ae79190612dbb565b611af19190612de8565b851015611b395760405162461bcd60e51b81526020600482015260166024820152750a0c2f2dacadce840eec2e640dcdee840cadcdeeaced60531b60448201526064016106dc565b909b909a509098509650505050505050565b6000818152600760208181526040808420815160a08101835281546001600160a01b0390811680835260018401805490921683870152600284018054848701526003850180546060860152600480870180546080880152938b5260058952878b20548b5288529589208990558989529690955282546001600160a01b031990811690935580549092169091559284905583905591909155611bef600684018361223d565b505050565b600081600301548260040154611c0a9190612fbf565b905080600003611bef5781546001600160a01b03166000908152600560205260409020611c3a9060010184612366565b600083815260066020526040812080546001600160a01b031916815590611c6460018301826125a0565b6002820160009055600382016000905560048201600090556005820160009055600682016000611c9491906125da565b5050505050565b6000600c54600014611d6757670de0b6b3a7640000600c548360600151611cc29190612dbb565b611ccc9190612de8565b600d5460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018390529192507f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015611d41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d659190612f9d565b505b6000818360600151611d799190612d60565b602084015160405163a9059cbb60e01b81526001600160a01b039182166004820152602481018390529192507f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015611df0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c949190612f9d565b6000546001600160a01b031633146112fd5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106dc565b805160009082908203611e845750600092915050565b50506020015190565b61191481604051602401611ea391815260200190565b60408051601f198184030181529190526020810180516001600160e01b03166327b7cf8560e01b17905261240b565b6001546040805160808101825286815260208101869052808201859052606081018490529051637bff11bf60e11b815260009283926001600160a01b039091169163f7fe237e91611f25916004016130d6565b602060405180830381865afa158015611f42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f66919061313b565b9695505050505050565b6040805160208101849052908101829052426060820152600090819060800160408051601f1981840301815291905280516020909101209050611fd37f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182613154565b949350505050565b60606000806006600085815260200190815260200160002060060180548060200260200160405190810160405280929190818152602001828054801561204057602002820191906000526020600020905b81548152602001906001019080831161202c575b50505050509050805167ffffffffffffffff81111561206157612061612609565b60405190808252806020026020018201604052801561208a578160200160208202803683370190505b50925060005b8151811015612184576000600760008484815181106120b1576120b1612fd2565b6020908102919091018101518252818101929092526040908101600020815160a08101835281546001600160a01b03908116825260018301541693810193909352600281015491830191909152600381015460608301526004015460808201819052600b54919250429161212491612fbf565b10156121735782828151811061213c5761213c612fd2565b602002602001015185838151811061215657612156612fd2565b602090810291909101015260608101516121709085612fbf565b93505b5061217d81612dfc565b9050612090565b5050915091565b60005b8151811015611bef576000801b8282815181106121ad576121ad612fd2565b6020026020010151146121dd576121dd838383815181106121d0576121d0612fd2565b6020026020010151611b4b565b6121e681612dfc565b905061218e565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000806122998480548060200260200160405190810160405280929190818152602001828054801561228e57602002820191906000526020600020905b81548152602001906001019080831161227a575b505050505084612414565b91509150806122e25760405162461bcd60e51b8152602060048201526015602482015274313cba32b99999103737ba1034b71030b93930bc9760591b60448201526064016106dc565b83546000906122f390600190612d60565b90508083146123385784818154811061230e5761230e612fd2565b906000526020600020015485848154811061232b5761232b612fd2565b6000918252602090912001555b8480548061234857612348613168565b60019003818190600052602060002001600090559055505b50505050565b6000806123c2848054806020026020016040519081016040528092919081815260200182805480156123b757602002820191906000526020600020905b8154815260200190600101908083116123a3575b505050505084612477565b91509150806122e25760405162461bcd60e51b81526020600482015260156024820152743ab4b73a191a9b103737ba1034b71030b93930bc9760591b60448201526064016106dc565b611914816124c7565b81516000908190815b81811015612464578486828151811061243857612438612fd2565b602002602001015103612452579250600191506124709050565b8061245c81612dfc565b91505061241d565b50600019600092509250505b9250929050565b81516000908190815b81811015612464578486828151811061249b5761249b612fd2565b6020026020010151036124b5579250600191506124709050565b806124bf81612dfc565b915050612480565b60006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b828054828255906000526020600020908101928215612523579160200282015b82811115612523578251825591602001919060010190612508565b5061252f9291506125f4565b5090565b60405180606001604052806000815260200161254d61255a565b8152602001600081525090565b6040518060e0016040528060006001600160a01b031681526020016060815260200160008152602001600081526020016000815260200160008152602001606081525090565b5080546125ac90612e5b565b6000825580601f106125bc575050565b601f01602090049060005260206000209081019061191491906125f4565b508054600082559060005260206000209081019061191491905b5b8082111561252f57600081556001016125f5565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561264257612642612609565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561267157612671612609565b604052919050565b600082601f83011261268a57600080fd5b61269261261f565b8060408401858111156126a457600080fd5b845b818110156126be5780358452602093840193016126a6565b509095945050505050565b600082601f8301126126da57600080fd5b6126e261261f565b8060808401858111156126f457600080fd5b845b818110156126be576127088782612679565b84526020909301926040016126f6565b60008060008061016080868803121561273057600080fd5b61273a8787612679565b945061274987604088016126c9565b93506127588760c08801612679565b92508661011f87011261276a57600080fd5b6040516060810181811067ffffffffffffffff8211171561278d5761278d612609565b6040529086019080888311156127a257600080fd5b61010088015b838110156127c05780358252602091820191016127a8565b5050809250505092959194509250565b6001600160a01b038116811461191457600080fd5b6000602082840312156127f757600080fd5b8135612802816127d0565b9392505050565b600082601f83011261281a57600080fd5b813567ffffffffffffffff81111561283457612834612609565b612847601f8201601f1916602001612648565b81815284602083860101111561285c57600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000806080858703121561288f57600080fd5b843593506020850135925060408501359150606085013567ffffffffffffffff8111156128bb57600080fd5b6128c787828801612809565b91505092959194509250565b6000602082840312156128e557600080fd5b5035919050565b60008060008061012080868803121561290457600080fd5b61290e8787612679565b945061291d87604088016126c9565b935061292c8760c08801612679565b92508661011f87011261293e57600080fd5b604051602080820182811067ffffffffffffffff8211171561296257612962612609565b60405291870191818984111561297757600080fd5b61010089015b84811015612994578035825290820190820161297d565b5096999598509396509450505050565b6000602082840312156129b657600080fd5b813567ffffffffffffffff8111156129cd57600080fd5b611fd384828501612809565b6000806000606084860312156129ee57600080fd5b833567ffffffffffffffff811115612a0557600080fd5b612a1186828701612809565b9660208601359650604090950135949350505050565b600080600060608486031215612a3c57600080fd5b83359250602084013591506040840135612a55816127d0565b809150509250925092565b60008060408385031215612a7357600080fd5b8235612a7e816127d0565b91506020830135612a8e816127d0565b809150509250929050565b60006020808385031215612aac57600080fd5b823567ffffffffffffffff80821115612ac457600080fd5b818501915085601f830112612ad857600080fd5b813581811115612aea57612aea612609565b8060051b9150612afb848301612648565b8181529183018401918481019088841115612b1557600080fd5b938501935b83851015612b3357843582529385019390850190612b1a565b98975050505050505050565b6000815180845260005b81811015612b6557602081850181015186830182015201612b49565b506000602082860101526020601f19601f83011685010191505092915050565b60018060a01b038151168252600060208083015160e082860152612bac60e0860182612b3f565b905060408401516040860152606084015160608601526080840151608086015260a084015160a086015260c084015185820360c087015281815180845284840191508483019350600092505b80831015612c185783518252928401926001929092019190840190612bf8565b509695505050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015612c9657603f19898403018552815160608151855288820151818a870152612c7882870182612b85565b92890151958901959095525094870194925090860190600101612c4a565b509098975050505050505050565b60208082528251828201528281015160408084015280516060840181905260009291820190839060808601908015612c185783518252928401926001929092019190840190612bf8565b6020815260006128026020830184612b85565b6001600160a01b038716815260c060208201819052600090612d2590830188612b3f565b90508560408301528460608301528360808301528260a0830152979650505050505050565b634e487b7160e01b600052601160045260246000fd5b81810381811115612d7357612d73612d4a565b92915050565b60208082526022908201527f496e74656e7420776173206e6f742063726561746564206265666f72652073656040820152611b9960f21b606082015260800190565b8082028115828204841417612d7357612d73612d4a565b634e487b7160e01b600052601260045260246000fd5b600082612df757612df7612dd2565b500490565b600060018201612e0e57612e0e612d4a565b5060010190565b60208082526026908201527f4163636f756e7420616c7265616479206173736f6369617465642077697468206040820152650d2c890c2e6d60d31b606082015260800190565b600181811c90821680612e6f57607f821691505b60208210810361153157634e487b7160e01b600052602260045260246000fd5b601f821115611bef57600081815260208120601f850160051c81016020861015612eb65750805b601f850160051c820191505b81811015612ed557828155600101612ec2565b505050505050565b815167ffffffffffffffff811115612ef757612ef7612609565b612f0b81612f058454612e5b565b84612e8f565b602080601f831160018114612f405760008415612f285750858301515b600019600386901b1c1916600185901b178555612ed5565b600085815260208120601f198616915b82811015612f6f57888601518255948401946001909101908401612f50565b5085821015612f8d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208284031215612faf57600080fd5b8151801515811461280257600080fd5b80820180821115612d7357612d73612d4a565b634e487b7160e01b600052603260045260246000fd5b8060005b6002811015612360578151845260209384019390910190600101612fec565b8060005b600281101561236057613023848351612fe8565b604093909301926020919091019060010161300f565b60006101608201905061304d828451612fe8565b602080840151613060604085018261300b565b50604084015161307360c0850182612fe8565b506060840151610100840160005b600381101561309e57825182529183019190830190600101613081565b5050505092915050565b6000806000606084860312156130bd57600080fd5b8351925060208401519150604084015190509250925092565b6000610120820190506130ea828451612fe8565b6020808401516130fd604085018261300b565b50604084015161311060c0850182612fe8565b506060840151610100840160005b600181101561309e5782518252918301919083019060010161311e565b60006020828403121561314d57600080fd5b5051919050565b60008261316357613163612dd2565b500690565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220863dac3ee5cc87caf7fd87b992410ea6b85113b152a65ac9c95ea58049b6fcdc64736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Ramp.sol:UPIRamp",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 981,
        "contract": "contracts/Ramp.sol:UPIRamp",
        "label": "registrationProcessor",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IRegistrationProcessor)3541"
      },
      {
        "astId": 984,
        "contract": "contracts/Ramp.sol:UPIRamp",
        "label": "sendProcessor",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IUPISendProcessor)3575"
      },
      {
        "astId": 986,
        "contract": "contracts/Ramp.sol:UPIRamp",
        "label": "offChainVerifier",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 988,
        "contract": "contracts/Ramp.sol:UPIRamp",
        "label": "isInitialized",
        "offset": 20,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 993,
        "contract": "contracts/Ramp.sol:UPIRamp",
        "label": "globalAccount",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_struct(GlobalAccountInfo)924_storage)"
      },
      {
        "astId": 998,
        "contract": "contracts/Ramp.sol:UPIRamp",
        "label": "accounts",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(AccountInfo)867_storage)"
      },
      {
        "astId": 1003,
        "contract": "contracts/Ramp.sol:UPIRamp",
        "label": "deposits",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(Deposit)883_storage)"
      },
      {
        "astId": 1008,
        "contract": "contracts/Ramp.sol:UPIRamp",
        "label": "intents",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_struct(Intent)902_storage)"
      },
      {
        "astId": 1010,
        "contract": "contracts/Ramp.sol:UPIRamp",
        "label": "minDepositAmount",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1012,
        "contract": "contracts/Ramp.sol:UPIRamp",
        "label": "maxOnRampAmount",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1014,
        "contract": "contracts/Ramp.sol:UPIRamp",
        "label": "onRampCooldownPeriod",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 1016,
        "contract": "contracts/Ramp.sol:UPIRamp",
        "label": "intentExpirationPeriod",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 1018,
        "contract": "contracts/Ramp.sol:UPIRamp",
        "label": "sustainabilityFee",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 1020,
        "contract": "contracts/Ramp.sol:UPIRamp",
        "label": "sustainabilityFeeRecipient",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 1022,
        "contract": "contracts/Ramp.sol:UPIRamp",
        "label": "depositCounter",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IRegistrationProcessor)3541": {
        "encoding": "inplace",
        "label": "contract IRegistrationProcessor",
        "numberOfBytes": "20"
      },
      "t_contract(IUPISendProcessor)3575": {
        "encoding": "inplace",
        "label": "contract IUPISendProcessor",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(AccountInfo)867_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct UPIRamp.AccountInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(AccountInfo)867_storage"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(GlobalAccountInfo)924_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct UPIRamp.GlobalAccountInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(GlobalAccountInfo)924_storage"
      },
      "t_mapping(t_bytes32,t_struct(Intent)902_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct UPIRamp.Intent)",
        "numberOfBytes": "32",
        "value": "t_struct(Intent)902_storage"
      },
      "t_mapping(t_uint256,t_struct(Deposit)883_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct UPIRamp.Deposit)",
        "numberOfBytes": "32",
        "value": "t_struct(Deposit)883_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AccountInfo)867_storage": {
        "encoding": "inplace",
        "label": "struct UPIRamp.AccountInfo",
        "members": [
          {
            "astId": 863,
            "contract": "contracts/Ramp.sol:UPIRamp",
            "label": "idHash",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 866,
            "contract": "contracts/Ramp.sol:UPIRamp",
            "label": "deposits",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(DenyList)916_storage": {
        "encoding": "inplace",
        "label": "struct UPIRamp.DenyList",
        "members": [
          {
            "astId": 911,
            "contract": "contracts/Ramp.sol:UPIRamp",
            "label": "deniedUsers",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 915,
            "contract": "contracts/Ramp.sol:UPIRamp",
            "label": "isDenied",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_bool)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Deposit)883_storage": {
        "encoding": "inplace",
        "label": "struct UPIRamp.Deposit",
        "members": [
          {
            "astId": 869,
            "contract": "contracts/Ramp.sol:UPIRamp",
            "label": "depositor",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 871,
            "contract": "contracts/Ramp.sol:UPIRamp",
            "label": "upiId",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 873,
            "contract": "contracts/Ramp.sol:UPIRamp",
            "label": "depositAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 875,
            "contract": "contracts/Ramp.sol:UPIRamp",
            "label": "remainingDeposits",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 877,
            "contract": "contracts/Ramp.sol:UPIRamp",
            "label": "outstandingIntentAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 879,
            "contract": "contracts/Ramp.sol:UPIRamp",
            "label": "conversionRate",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 882,
            "contract": "contracts/Ramp.sol:UPIRamp",
            "label": "intentHashes",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_bytes32)dyn_storage"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(GlobalAccountInfo)924_storage": {
        "encoding": "inplace",
        "label": "struct UPIRamp.GlobalAccountInfo",
        "members": [
          {
            "astId": 918,
            "contract": "contracts/Ramp.sol:UPIRamp",
            "label": "currentIntentHash",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 920,
            "contract": "contracts/Ramp.sol:UPIRamp",
            "label": "lastOnrampTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 923,
            "contract": "contracts/Ramp.sol:UPIRamp",
            "label": "denyList",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(DenyList)916_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Intent)902_storage": {
        "encoding": "inplace",
        "label": "struct UPIRamp.Intent",
        "members": [
          {
            "astId": 893,
            "contract": "contracts/Ramp.sol:UPIRamp",
            "label": "onRamper",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 895,
            "contract": "contracts/Ramp.sol:UPIRamp",
            "label": "to",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 897,
            "contract": "contracts/Ramp.sol:UPIRamp",
            "label": "deposit",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 899,
            "contract": "contracts/Ramp.sol:UPIRamp",
            "label": "amount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 901,
            "contract": "contracts/Ramp.sol:UPIRamp",
            "label": "intentTimestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}