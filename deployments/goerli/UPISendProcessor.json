{
  "address": "0xd77610A9116027E83A21032b4227433DafE9A371",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ramp",
          "type": "address"
        },
        {
          "internalType": "contract INullifierRegistry",
          "name": "_nullifierRegistry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "emailFromAddress",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nullifierRegistry",
      "outputs": [
        {
          "internalType": "contract INullifierRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256[2]",
              "name": "a",
              "type": "uint256[2]"
            },
            {
              "internalType": "uint256[2][2]",
              "name": "b",
              "type": "uint256[2][2]"
            },
            {
              "internalType": "uint256[2]",
              "name": "c",
              "type": "uint256[2]"
            },
            {
              "internalType": "uint256[3]",
              "name": "signals",
              "type": "uint256[3]"
            }
          ],
          "internalType": "struct IUPISendProcessor.SendProof",
          "name": "_proof",
          "type": "tuple"
        }
      ],
      "name": "processProof",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "intentHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ramp",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe7b47c9435cc3d2327d7554ae3917a17ead2eb704ca7ef2c5ec913feb56d4d16",
  "receipt": {
    "to": null,
    "from": "0xC4F01Cb7A8548Ad27e9ACd16857754e24110E942",
    "contractAddress": "0xd77610A9116027E83A21032b4227433DafE9A371",
    "transactionIndex": 50,
    "gasUsed": "361521",
    "logsBloom": "0x
    "blockHash": "0x66f7425cff72e704ef561a2d895375127cc41da97fbd53a30e0bc2385b0d0d94",
    "transactionHash": "0xe7b47c9435cc3d2327d7554ae3917a17ead2eb704ca7ef2c5ec913feb56d4d16",
    "logs": [
      {
        "transactionIndex": 50,
        "blockNumber": 10184906,
        "transactionHash": "0xe7b47c9435cc3d2327d7554ae3917a17ead2eb704ca7ef2c5ec913feb56d4d16",
        "address": "0xd77610A9116027E83A21032b4227433DafE9A371",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c4f01cb7a8548ad27e9acd16857754e24110e942"
        ],
        "data": "0x",
        "logIndex": 130,
        "blockHash": "0x66f7425cff72e704ef561a2d895375127cc41da97fbd53a30e0bc2385b0d0d94"
      }
    ],
    "blockNumber": 10184906,
    "cumulativeGasUsed": "13566443",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x696ACb718e1AFdF8143e43aDFAAfDC0480c2C06f",
    "0x65b4eC32937ca2740f53718d17ead1199CE79A6B"
  ],
  "numDeployments": 1,
  "solcInputHash": "830257b29fcbbf18f9e1d1182e9c74c1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ramp\",\"type\":\"address\"},{\"internalType\":\"contract INullifierRegistry\",\"name\":\"_nullifierRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"emailFromAddress\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nullifierRegistry\",\"outputs\":[{\"internalType\":\"contract INullifierRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[3]\",\"name\":\"signals\",\"type\":\"uint256[3]\"}],\"internalType\":\"struct IUPISendProcessor.SendProof\",\"name\":\"_proof\",\"type\":\"tuple\"}],\"name\":\"processProof\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"intentHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ramp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/processors/UPISendProcessor.sol\":\"UPISendProcessor\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/external/DateTime.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// ----------------------------------------------------------------------------\\n// DateTime Library v2.0\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\\n//\\n// NOTE: This library has been pruned to keep only functions needed by zkp2p\\n// ----------------------------------------------------------------------------\\n\\nlibrary DateTime {\\n    uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint256 constant SECONDS_PER_HOUR = 60 * 60;\\n    uint256 constant SECONDS_PER_MINUTE = 60;\\n    int256 constant OFFSET19700101 = 2440588;\\n\\n    uint256 constant DOW_MON = 1;\\n    uint256 constant DOW_TUE = 2;\\n    uint256 constant DOW_WED = 3;\\n    uint256 constant DOW_THU = 4;\\n    uint256 constant DOW_FRI = 5;\\n    uint256 constant DOW_SAT = 6;\\n    uint256 constant DOW_SUN = 7;\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // days = day\\n    //      - 32075\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\n    //      - offset\\n    // ------------------------------------------------------------------------\\n    function _daysFromDate(uint256 year, uint256 month, uint256 day) internal pure returns (uint256 _days) {\\n        require(year >= 1970);\\n        int256 _year = int256(year);\\n        int256 _month = int256(month);\\n        int256 _day = int256(day);\\n\\n        int256 __days = _day - 32075 + (1461 * (_year + 4800 + (_month - 14) / 12)) / 4\\n            + (367 * (_month - 2 - ((_month - 14) / 12) * 12)) / 12\\n            - (3 * ((_year + 4900 + (_month - 14) / 12) / 100)) / 4 - OFFSET19700101;\\n\\n        _days = uint256(__days);\\n    }\\n\\n    function timestampFromDateTime(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        uint256 hour,\\n        uint256 minute,\\n        uint256 second\\n    )\\n        internal\\n        pure\\n        returns (uint256 timestamp)\\n    {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + hour * SECONDS_PER_HOUR\\n            + minute * SECONDS_PER_MINUTE + second;\\n    }\\n}\\n\",\"keccak256\":\"0x64f6113ad342f8bd3c2eb74fde279401d604faf77dd08f6c16c3912c3519f170\",\"license\":\"MIT\"},\"contracts/interfaces/IUPISendProcessor.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\ninterface IUPISendProcessor {\\n\\n    struct SendProof {\\n        uint256[2] a;\\n        uint256[2][2] b;\\n        uint256[2] c;\\n        uint256[3] signals;\\n    }\\n\\n    function processProof(\\n        SendProof calldata _proof\\n    )\\n        external\\n    returns(uint256, uint256, bytes32);\\n}\\n\",\"keccak256\":\"0x1afabe88997c53823b2da94a2a32e5192ce2c9b324bc8f9c862aceedf1b17aaf\",\"license\":\"MIT\"},\"contracts/processors/BaseProcessor.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport { INullifierRegistry } from \\\"./nullifierRegistries/INullifierRegistry.sol\\\";\\n\\npragma solidity ^0.8.18;\\n\\ncontract BaseProcessor is Ownable {\\n\\n    /* ============ Modifiers ============ */\\n    modifier onlyRamp() {\\n        require(msg.sender == ramp, \\\"Only Ramp can call this function\\\");\\n        _;\\n    }\\n\\n    /* ============ State Variables ============ */\\n    address public immutable ramp;\\n    INullifierRegistry public nullifierRegistry;\\n    bytes public emailFromAddress;\\n\\n    /* ============ Constructor ============ */\\n    constructor(\\n        address _ramp,\\n        INullifierRegistry _nullifierRegistry\\n    )\\n        Ownable()\\n    {\\n        ramp = _ramp;\\n        nullifierRegistry = _nullifierRegistry;\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /* ============ External Getters ============ */\\n\\n    /* ============ Internal Functions ============ */\\n\\n    function _validateAndAddNullifier(bytes32 _nullifier) internal {\\n        require(!nullifierRegistry.isNullified(_nullifier), \\\"Nullifier has already been used\\\");\\n        nullifierRegistry.addNullifier(_nullifier);\\n    }\\n}\\n\",\"keccak256\":\"0x8220eaa8d62122bdd225daae94ea22fd5178694039b3bdbfe3e16dc165fa060e\",\"license\":\"MIT\"},\"contracts/processors/UPISendProcessor.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\n// import { StringUtils } from \\\"@zk-email/contracts/utils/StringUtils.sol\\\";\\n\\nimport { DateTime } from \\\"../external/DateTime.sol\\\";\\n\\nimport { BaseProcessor } from \\\"./BaseProcessor.sol\\\";\\n// import { Groth16Verifier } from \\\"../verifiers/upi_send_verifier.sol\\\";\\nimport { INullifierRegistry } from \\\"./nullifierRegistries/INullifierRegistry.sol\\\";\\nimport { IUPISendProcessor } from \\\"../interfaces/IUPISendProcessor.sol\\\";\\n// import { StringConversionUtils } from \\\"../lib/StringConversionUtils.sol\\\";\\n\\npragma solidity ^0.8.18;\\n\\ncontract UPISendProcessor is  IUPISendProcessor, BaseProcessor {\\n    \\n    // using StringUtils for uint256[];\\n    // using StringConversionUtils for string;\\n\\n    /* ============ Constants ============ */\\n    uint256 constant PACK_SIZE = 7;\\n    uint256 constant IST_OFFSET = 19800;\\n\\n    /* ============ Constructor ============ */\\n    constructor(\\n        address _ramp,\\n        INullifierRegistry _nullifierRegistry\\n    )\\n        BaseProcessor(_ramp, _nullifierRegistry)\\n    {}\\n    \\n    /* ============ External Functions ============ */\\n    function processProof(\\n        IUPISendProcessor.SendProof calldata _proof\\n    )\\n        public\\n        override\\n        onlyRamp\\n        returns(\\n            uint256 amount,\\n            uint256 timestamp,\\n            bytes32 intentHash\\n        )\\n    {\\n        // require(this.verifyProof(_proof.a, _proof.b, _proof.c, _proof.signals), \\\"Invalid Proof\\\"); // checks effects iteractions, this should come first\\n\\n        amount = _proof.signals[0];\\n\\n        // string memory rawTimestamp = _parseSignalArray(_proof.signals, 6, 11);\\n        timestamp = _proof.signals[1];\\n\\n        \\n        // Check if email has been used previously, if not nullify it so it can't be used again\\n        // _validateAndAddNullifier(bytes32(_proof.signals[2]));\\n\\n        // Signals [4] is intentHash\\n        intentHash = bytes32(_proof.signals[2]);\\n    }\\n    \\n}\\n\",\"keccak256\":\"0x9b492ef4d5c9d43554a2a0ca977b07ae30d045ef5412001ec0391ae53965974f\",\"license\":\"MIT\"},\"contracts/processors/nullifierRegistries/INullifierRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\ninterface INullifierRegistry {\\n    function addNullifier(bytes32 _nullifier) external;\\n    function isNullified(bytes32 _nullifier) external view returns(bool);\\n}\\n\",\"keccak256\":\"0x107164bc9a320938b513305878163b7fa884da4cdae58d0c8e81bfbb00c97c5e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b506040516105d23803806105d283398101604081905261002f916100cd565b818161003a33610065565b6001600160a01b03918216608052600180546001600160a01b03191691909216179055506101079050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146100ca57600080fd5b50565b600080604083850312156100e057600080fd5b82516100eb816100b5565b60208401519092506100fc816100b5565b809150509250929050565b6080516104aa610128600039600081816087015261015901526104aa6000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638da5cb5b1161005b5780638da5cb5b146100fe578063b870676c1461010f578063c0d05fed14610122578063f2fde38b1461013757600080fd5b806315d276e11461008257806345452acd146100c6578063715018a6146100f4575b600080fd5b6100a97f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100d96100d43660046103a9565b61014a565b604080519384526020840192909252908201526060016100bd565b6100fc6101e4565b005b6000546001600160a01b03166100a9565b6001546100a9906001600160a01b031681565b61012a6101f8565b6040516100bd91906103c2565b6100fc610145366004610410565b610286565b60008080336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146101cb5760405162461bcd60e51b815260206004820181905260248201527f4f6e6c792052616d702063616e2063616c6c20746869732066756e6374696f6e60448201526064015b60405180910390fd5b5050506101008101359161012082013591610140013590565b6101ec6102ff565b6101f66000610359565b565b6002805461020590610440565b80601f016020809104026020016040519081016040528092919081815260200182805461023190610440565b801561027e5780601f106102535761010080835404028352916020019161027e565b820191906000526020600020905b81548152906001019060200180831161026157829003601f168201915b505050505081565b61028e6102ff565b6001600160a01b0381166102f35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101c2565b6102fc81610359565b50565b6000546001600160a01b031633146101f65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101c2565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600061016082840312156103bc57600080fd5b50919050565b600060208083528351808285015260005b818110156103ef578581018301518582016040015282016103d3565b506000604082860101526040601f19601f8301168501019250505092915050565b60006020828403121561042257600080fd5b81356001600160a01b038116811461043957600080fd5b9392505050565b600181811c9082168061045457607f821691505b6020821081036103bc57634e487b7160e01b600052602260045260246000fdfea264697066735822122014f9951bcf19556bd8d150f4654a6b2445f8207887353dda9ebf3f3113887f6964736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80638da5cb5b1161005b5780638da5cb5b146100fe578063b870676c1461010f578063c0d05fed14610122578063f2fde38b1461013757600080fd5b806315d276e11461008257806345452acd146100c6578063715018a6146100f4575b600080fd5b6100a97f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100d96100d43660046103a9565b61014a565b604080519384526020840192909252908201526060016100bd565b6100fc6101e4565b005b6000546001600160a01b03166100a9565b6001546100a9906001600160a01b031681565b61012a6101f8565b6040516100bd91906103c2565b6100fc610145366004610410565b610286565b60008080336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146101cb5760405162461bcd60e51b815260206004820181905260248201527f4f6e6c792052616d702063616e2063616c6c20746869732066756e6374696f6e60448201526064015b60405180910390fd5b5050506101008101359161012082013591610140013590565b6101ec6102ff565b6101f66000610359565b565b6002805461020590610440565b80601f016020809104026020016040519081016040528092919081815260200182805461023190610440565b801561027e5780601f106102535761010080835404028352916020019161027e565b820191906000526020600020905b81548152906001019060200180831161026157829003601f168201915b505050505081565b61028e6102ff565b6001600160a01b0381166102f35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101c2565b6102fc81610359565b50565b6000546001600160a01b031633146101f65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101c2565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600061016082840312156103bc57600080fd5b50919050565b600060208083528351808285015260005b818110156103ef578581018301518582016040015282016103d3565b506000604082860101526040601f19601f8301168501019250505092915050565b60006020828403121561042257600080fd5b81356001600160a01b038116811461043957600080fd5b9392505050565b600181811c9082168061045457607f821691505b6020821081036103bc57634e487b7160e01b600052602260045260246000fdfea264697066735822122014f9951bcf19556bd8d150f4654a6b2445f8207887353dda9ebf3f3113887f6964736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/processors/UPISendProcessor.sol:UPISendProcessor",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3597,
        "contract": "contracts/processors/UPISendProcessor.sol:UPISendProcessor",
        "label": "nullifierRegistry",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(INullifierRegistry)3780"
      },
      {
        "astId": 3599,
        "contract": "contracts/processors/UPISendProcessor.sol:UPISendProcessor",
        "label": "emailFromAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(INullifierRegistry)3780": {
        "encoding": "inplace",
        "label": "contract INullifierRegistry",
        "numberOfBytes": "20"
      }
    }
  }
}